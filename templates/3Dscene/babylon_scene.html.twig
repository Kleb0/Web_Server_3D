<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TEST | Babylon.JS Simple Project</title>
    <script src="https://cdn.babylonjs.com/babylon.js"></script>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/themes/nano.min.css">
    <script src="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/pickr.min.js"></script>
    <script src="https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js"></script>
    <script src = "https://cdn.babylonjs.com/cannon.js"></script>

    <style>
        body {
            margin: 0;
            overflow: hidden;
        }
        canvas {
            display: block;
        }
        .pickr {
            width: 300px !important;
        }
    </style>
</head>
<body>
    <div id="controls-container" style="position: absolute; top: 10px; left: 10px; z-index: 10; background: rgba(255, 255, 255, 0.8); padding: 30px; border-radius: 10px; font-size: 30px; width: 15%; height: auto;">
        <label style="display: block; margin-bottom: 25px;">Background Color:</label>
        <div id="color-picker" style="margin-bottom: 40px;"></div>
        <label for="brightnessInput" style="display: block; margin-bottom: 15px;">Brightness:</label>
        <input type="range" id="brightnessInput" min="0.1" max="2" step="0.1" value="1" style="width: 100%; height: 40px;">
    </div>

    <!-- draw a circle_cursor at the middle of the screen -->

    <div id="cursor" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 20px; height: 20px; border-radius: 50%; background-color: white;"></div>

    <canvas id="renderCanvas" style="width: 100%; height: 100%;"></canvas>



    <!-- with this method the script is executed from the server memory. We use a blob object created from the script content
    obtained by API fetching instead of the real script, the script src is then the blob object URL. The blob act like a clone 
    protecting the real script -->
    <script>
        document.addEventListener("DOMContentLoaded", async function() {
            try {
                // inject the config JSON into the window object
                window.sceneConfig = {{ config|json_encode|raw }};
                console.log("Config JSON injected by Twig:", window.sceneConfig);

                const scriptPath = window.sceneConfig.babylonPath;

                if(!scriptPath) throw new Error("No script path found in config");
                else console.log("Script path found in config:", scriptPath);

            
                console.log("GLTF Path (window.sceneConfig):", window.sceneConfig["3DfilePath"]);
                console.log("Babylon Path (window.sceneConfig):", window.sceneConfig["babylonPath"]);

                if (!window.sceneConfig.babylonPath) throw new Error("No script path found in config");
                if (!window.sceneConfig["3DfilePath"]) throw new Error("3DfilePath not found in config.json");


                //get the injected script from the Home controller                    
                const scriptContent = {{ scriptContent|raw }};
    
                // create a blob object from the script content
                const blob = new Blob([scriptContent], { type: 'application/javascript' });
                const scriptUrl = URL.createObjectURL(blob);
                const script = document.createElement("script");
                script.src = scriptUrl;
                document.body.appendChild(script);

                console.log("✅ Script injected successfully");

            } 
            catch (error) {
                console.error("❌ Error loading script:", error);
            }
        });
    </script>

</body>
</html>